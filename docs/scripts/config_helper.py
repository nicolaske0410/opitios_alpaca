#!/usr/bin/env python3
"""
Configuration Helper Script for Opitios Alpaca Trading Service

This script provides interactive configuration management and validation
to help users set up their environment correctly.

Usage:
    python docs/scripts/config_helper.py

Features:
- Interactive configuration setup
- Environment variable validation
- .env file management
- API key format validation
- Configuration templates
- Security best practices guidance
"""

import os
import sys
import json
import getpass
from pathlib import Path
from typing import Dict, List, Tuple, Optional

# Color codes for terminal output
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(title: str):
    """Print formatted header"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{title.center(60)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")

def print_success(message: str):
    """Print success message"""
    print(f"{Colors.GREEN}✅ {message}{Colors.END}")

def print_warning(message: str):
    """Print warning message"""
    print(f"{Colors.YELLOW}⚠️  {message}{Colors.END}")

def print_error(message: str):
    """Print error message"""
    print(f"{Colors.RED}❌ {message}{Colors.END}")

def print_info(message: str):
    """Print info message"""
    print(f"{Colors.BLUE}ℹ️  {message}{Colors.END}")

def get_user_input(prompt: str, default: str = None, secure: bool = False) -> str:
    """Get user input with optional default and secure input"""
    if secure:
        if default:
            user_input = getpass.getpass(f"{Colors.YELLOW}{prompt} (default: {'*' * len(default)}): {Colors.END}")
            return user_input if user_input else default
        else:
            return getpass.getpass(f"{Colors.YELLOW}{prompt}: {Colors.END}")
    else:
        if default:
            user_input = input(f"{Colors.YELLOW}{prompt} (default: {default}): {Colors.END}")
            return user_input if user_input else default
        else:
            return input(f"{Colors.YELLOW}{prompt}: {Colors.END}")

def validate_api_key_format(api_key: str, key_type: str) -> Tuple[bool, str]:
    """Validate API key format"""
    if not api_key:
        return False, f"{key_type} is empty"
    
    if key_type == "API Key":
        if not api_key.startswith(('PK', 'AK')):
            return False, "API Key should start with 'PK' (paper trading) or 'AK' (live trading)"
        if len(api_key) < 20:
            return False, "API Key seems too short"
    elif key_type == "Secret Key":
        if len(api_key) < 20:
            return False, "Secret Key seems too short"
        if len(api_key) > 100:
            return False, "Secret Key seems too long"
    
    return True, "Valid format"

def read_existing_config() -> Dict[str, str]:
    """Read existing .env configuration"""
    env_file = Path('.env')
    config = {}
    
    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
        except Exception as e:
            print_warning(f"Error reading existing .env file: {str(e)}")
    
    return config

def write_env_file(config: Dict[str, str]) -> bool:
    """Write configuration to .env file"""
    try:
        with open('.env', 'w') as f:
            f.write("# Opitios Alpaca Trading Service Configuration\n")
            f.write("# Generated by Configuration Helper\n")
            f.write(f"# Created: {os.popen('date').read().strip()}\n\n")
            
            # Alpaca API Configuration
            f.write("# Alpaca API Configuration\n")
            f.write(f"ALPACA_API_KEY={config.get('ALPACA_API_KEY', '')}\n")
            f.write(f"ALPACA_SECRET_KEY={config.get('ALPACA_SECRET_KEY', '')}\n")
            f.write(f"ALPACA_BASE_URL={config.get('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets')}\n")
            f.write(f"ALPACA_PAPER_TRADING={config.get('ALPACA_PAPER_TRADING', 'true')}\n\n")
            
            # Server Configuration
            f.write("# Server Configuration\n")
            f.write(f"HOST={config.get('HOST', '0.0.0.0')}\n")
            f.write(f"PORT={config.get('PORT', '8081')}\n")
            f.write(f"DEBUG={config.get('DEBUG', 'true')}\n\n")
            
            # Security Notice
            f.write("# SECURITY NOTICE:\n")
            f.write("# - Never commit this file to version control\n")
            f.write("# - Keep your API keys secure\n")
            f.write("# - Use paper trading for testing\n")
        
        return True
    except Exception as e:
        print_error(f"Error writing .env file: {str(e)}")
        return False

def backup_existing_config() -> bool:
    """Backup existing .env file"""
    env_file = Path('.env')
    if env_file.exists():
        try:
            backup_file = Path(f'.env.backup.{os.popen("date +%Y%m%d_%H%M%S").read().strip()}')
            with open(env_file, 'r') as src, open(backup_file, 'w') as dst:
                dst.write(src.read())
            print_success(f"Existing configuration backed up to: {backup_file}")
            return True
        except Exception as e:
            print_warning(f"Could not backup existing config: {str(e)}")
            return False
    return True

def interactive_config_setup() -> Dict[str, str]:
    """Interactive configuration setup"""
    print_header("Interactive Configuration Setup")
    print(f"{Colors.WHITE}Let's set up your Opitios Alpaca Trading Service configuration.{Colors.END}")
    
    config = {}
    existing_config = read_existing_config()
    
    # API Key Configuration
    print(f"\n{Colors.CYAN}[1/7] Alpaca API Key Configuration{Colors.END}")
    print("You can get your API keys from: https://app.alpaca.markets/")
    
    api_key = get_user_input(
        "Enter your Alpaca API Key", 
        existing_config.get('ALPACA_API_KEY', '')
    )
    
    # Validate API Key
    valid, message = validate_api_key_format(api_key, "API Key")
    if valid:
        print_success(f"API Key format: {message}")
        config['ALPACA_API_KEY'] = api_key
    else:
        print_warning(f"API Key format: {message}")
        config['ALPACA_API_KEY'] = api_key  # Still save it
    
    # Secret Key Configuration
    print(f"\n{Colors.CYAN}[2/7] Alpaca Secret Key Configuration{Colors.END}")
    secret_key = get_user_input(
        "Enter your Alpaca Secret Key", 
        existing_config.get('ALPACA_SECRET_KEY', ''),
        secure=True
    )
    
    # Validate Secret Key
    valid, message = validate_api_key_format(secret_key, "Secret Key")
    if valid:
        print_success(f"Secret Key format: {message}")
        config['ALPACA_SECRET_KEY'] = secret_key
    else:
        print_warning(f"Secret Key format: {message}")
        config['ALPACA_SECRET_KEY'] = secret_key  # Still save it
    
    # Trading Mode Configuration
    print(f"\n{Colors.CYAN}[3/7] Trading Mode Configuration{Colors.END}")
    print("Trading modes:")
    print("  1. Paper Trading (recommended for testing)")
    print("  2. Live Trading (real money - use with caution)")
    
    trading_mode = get_user_input(
        "Select trading mode (1 or 2)", 
        "1"
    )
    
    if trading_mode == "2":
        print_warning("Live trading selected - you will be using real money!")
        confirm = get_user_input("Are you sure? (yes/no)", "no")
        if confirm.lower() != "yes":
            trading_mode = "1"
            print_info("Switched back to paper trading for safety")
    
    if trading_mode == "1":
        config['ALPACA_PAPER_TRADING'] = 'true'
        config['ALPACA_BASE_URL'] = 'https://paper-api.alpaca.markets'
        print_success("Paper trading mode configured")
    else:
        config['ALPACA_PAPER_TRADING'] = 'false'
        config['ALPACA_BASE_URL'] = 'https://api.alpaca.markets'
        print_warning("Live trading mode configured - be careful!")
    
    # Server Configuration
    print(f"\n{Colors.CYAN}[4/7] Server Host Configuration{Colors.END}")
    host = get_user_input(
        "Server host (0.0.0.0 for all interfaces, 127.0.0.1 for localhost only)", 
        existing_config.get('HOST', '0.0.0.0')
    )
    config['HOST'] = host
    
    print(f"\n{Colors.CYAN}[5/7] Server Port Configuration{Colors.END}")
    port = get_user_input(
        "Server port", 
        existing_config.get('PORT', '8081')
    )
    
    # Validate port
    try:
        port_num = int(port)
        if 1024 <= port_num <= 65535:
            config['PORT'] = port
            print_success(f"Port {port} configured")
        else:
            print_warning("Port should be between 1024 and 65535")
            config['PORT'] = '8081'
            print_info("Using default port 8081")
    except ValueError:
        print_warning("Invalid port number")
        config['PORT'] = '8081'
        print_info("Using default port 8081")
    
    # Debug Mode Configuration
    print(f"\n{Colors.CYAN}[6/7] Debug Mode Configuration{Colors.END}")
    debug_mode = get_user_input(
        "Enable debug mode? (true/false)", 
        existing_config.get('DEBUG', 'true')
    )
    config['DEBUG'] = debug_mode.lower()
    
    # Configuration Summary
    print(f"\n{Colors.CYAN}[7/7] Configuration Summary{Colors.END}")
    print("Your configuration:")
    print(f"  API Key: {'*' * (len(config['ALPACA_API_KEY']) - 4)}{config['ALPACA_API_KEY'][-4:]}")
    print(f"  Secret Key: {'*' * 36}****")
    print(f"  Trading Mode: {'Paper Trading' if config['ALPACA_PAPER_TRADING'] == 'true' else 'Live Trading'}")
    print(f"  Server: {config['HOST']}:{config['PORT']}")
    print(f"  Debug Mode: {config['DEBUG']}")
    
    return config

def validate_configuration(config: Dict[str, str]) -> List[str]:
    """Validate the complete configuration"""
    issues = []
    
    # Check required fields
    required_fields = ['ALPACA_API_KEY', 'ALPACA_SECRET_KEY']
    for field in required_fields:
        if not config.get(field):
            issues.append(f"{field} is required")
    
    # Validate API key formats
    if config.get('ALPACA_API_KEY'):
        valid, message = validate_api_key_format(config['ALPACA_API_KEY'], "API Key")
        if not valid:
            issues.append(f"API Key: {message}")
    
    if config.get('ALPACA_SECRET_KEY'):
        valid, message = validate_api_key_format(config['ALPACA_SECRET_KEY'], "Secret Key")
        if not valid:
            issues.append(f"Secret Key: {message}")
    
    # Validate port
    try:
        port = int(config.get('PORT', '8081'))
        if not (1024 <= port <= 65535):
            issues.append("Port should be between 1024 and 65535")
    except ValueError:
        issues.append("Port must be a valid number")
    
    # Validate boolean values
    boolean_fields = ['ALPACA_PAPER_TRADING', 'DEBUG']
    for field in boolean_fields:
        value = config.get(field, '').lower()
        if value not in ['true', 'false']:
            issues.append(f"{field} should be 'true' or 'false'")
    
    return issues

def generate_config_templates():
    """Generate configuration templates for different scenarios"""
    templates = {
        'development': {
            'ALPACA_API_KEY': 'PK_YOUR_PAPER_TRADING_API_KEY_HERE',
            'ALPACA_SECRET_KEY': 'your_paper_trading_secret_key_here',
            'ALPACA_BASE_URL': 'https://paper-api.alpaca.markets',
            'ALPACA_PAPER_TRADING': 'true',
            'HOST': '127.0.0.1',
            'PORT': '8081',
            'DEBUG': 'true'
        },
        'production_paper': {
            'ALPACA_API_KEY': 'PK_YOUR_PAPER_TRADING_API_KEY_HERE',
            'ALPACA_SECRET_KEY': 'your_paper_trading_secret_key_here',
            'ALPACA_BASE_URL': 'https://paper-api.alpaca.markets',
            'ALPACA_PAPER_TRADING': 'true',
            'HOST': '0.0.0.0',
            'PORT': '8081',
            'DEBUG': 'false'
        },
        'production_live': {
            'ALPACA_API_KEY': 'AK_YOUR_LIVE_TRADING_API_KEY_HERE',
            'ALPACA_SECRET_KEY': 'your_live_trading_secret_key_here',
            'ALPACA_BASE_URL': 'https://api.alpaca.markets',
            'ALPACA_PAPER_TRADING': 'false',
            'HOST': '0.0.0.0',
            'PORT': '8081',
            'DEBUG': 'false'
        }
    }
    
    print_header("Configuration Templates")
    print("Available templates:")
    print("1. Development (local testing with paper trading)")
    print("2. Production Paper (production server with paper trading)")
    print("3. Production Live (production server with live trading - CAUTION)")
    
    choice = get_user_input("Select template (1-3) or 'skip'", "skip")
    
    if choice in ['1', '2', '3']:
        template_names = ['development', 'production_paper', 'production_live']
        selected_template = templates[template_names[int(choice) - 1]]
        
        print(f"\n{Colors.CYAN}Selected template configuration:{Colors.END}")
        for key, value in selected_template.items():
            if 'KEY' in key:
                print(f"  {key}={value}")
            else:
                print(f"  {key}={value}")
        
        use_template = get_user_input("Use this template? (yes/no)", "no")
        if use_template.lower() == "yes":
            return selected_template
    
    return None

def security_recommendations():
    """Display security recommendations"""
    print_header("Security Recommendations")
    print(f"{Colors.YELLOW}Important Security Guidelines:{Colors.END}")
    print("1. 🔐 Never commit .env files to version control")
    print("2. 🔐 Add .env to your .gitignore file")
    print("3. 🔐 Use paper trading for testing and development")
    print("4. 🔐 Keep API keys secure and rotate them regularly")
    print("5. 🔐 Use environment-specific configurations")
    print("6. 🔐 Monitor your trading account regularly")
    print("7. 🔐 Set up proper logging and alerting")
    print("8. 🔐 Use HTTPS in production environments")
    
    print(f"\n{Colors.CYAN}Recommended .gitignore entries:{Colors.END}")
    print(".env")
    print(".env.*")
    print("!.env.example")
    print("logs/")
    print("*.log")

def main():
    """Main configuration helper workflow"""
    print_header("Opitios Alpaca Trading Service - Configuration Helper")
    print(f"{Colors.WHITE}This tool will help you configure your trading service safely and correctly.{Colors.END}")
    
    # Check if .env exists
    env_file = Path('.env')
    if env_file.exists():
        print_info("Existing .env file found")
        action = get_user_input("What would you like to do? (edit/backup/new/templates/validate)", "edit")
    else:
        print_info("No .env file found - let's create one")
        action = get_user_input("What would you like to do? (new/templates)", "new")
    
    if action == "templates":
        template_config = generate_config_templates()
        if template_config:
            config = template_config
            # Allow user to customize template
            customize = get_user_input("Customize template values? (yes/no)", "yes")
            if customize.lower() == "yes":
                config = interactive_config_setup()
        else:
            config = interactive_config_setup()
    elif action == "validate":
        existing_config = read_existing_config()
        if existing_config:
            issues = validate_configuration(existing_config)
            if issues:
                print_error("Configuration issues found:")
                for issue in issues:
                    print(f"  • {issue}")
            else:
                print_success("Configuration is valid!")
            return
        else:
            print_error("No configuration found to validate")
            return
    elif action == "backup":
        backup_existing_config()
        return
    else:  # edit or new
        config = interactive_config_setup()
    
    # Validate configuration
    issues = validate_configuration(config)
    if issues:
        print_warning("Configuration issues detected:")
        for issue in issues:
            print(f"  • {issue}")
        
        continue_anyway = get_user_input("Continue with this configuration? (yes/no)", "no")
        if continue_anyway.lower() != "yes":
            print_info("Configuration cancelled")
            return
    
    # Backup existing config if it exists
    if env_file.exists():
        backup_existing_config()
    
    # Write configuration
    if write_env_file(config):
        print_success("Configuration saved to .env file")
        
        # Test configuration
        test_config = get_user_input("Test the configuration now? (yes/no)", "yes")
        if test_config.lower() == "yes":
            print_info("Testing configuration...")
            try:
                # Import and test
                import subprocess
                result = subprocess.run(
                    [sys.executable, "docs/scripts/setup_validator.py"], 
                    capture_output=True, 
                    text=True, 
                    timeout=30
                )
                if result.returncode == 0:
                    print_success("Configuration test passed!")
                else:
                    print_warning("Configuration test had issues - check the output above")
            except Exception as e:
                print_warning(f"Could not run configuration test: {str(e)}")
        
        # Show security recommendations
        show_security = get_user_input("Show security recommendations? (yes/no)", "yes")
        if show_security.lower() == "yes":
            security_recommendations()
        
        print_success("Configuration setup complete!")
        print_info("Next steps:")
        print("  1. Run: python docs/scripts/setup_validator.py")
        print("  2. Start the server: python main.py")
        print("  3. Visit: http://localhost:8081/docs")
    else:
        print_error("Failed to save configuration")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}Configuration cancelled by user.{Colors.END}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.RED}Unexpected error: {str(e)}{Colors.END}")
        sys.exit(1)