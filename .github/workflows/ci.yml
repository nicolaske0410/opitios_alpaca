name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-json-report plotly flake8
    
    - name: Create test secrets file
      run: |
        cat > secrets.yml << EOF
        alpaca:
          api_key: "test_key"
          secret_key: "test_secret"
          paper_trading: true
        jwt:
          secret: "test_jwt_secret"
        redis:
          url: "redis://localhost:6379"
        EOF
    
    - name: Critical linting check
      run: |
        echo "Running critical linting checks only..."
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/unit/ -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --html=test-reports/report.html \
          --json-report --json-report-file=test-reports/report.json
    
    - name: Run security tests
      run: |
        python -m pytest tests/security/ -v \
          --cov=app --cov-append \
          --cov-report=xml \
          --cov-report=term-missing
    
    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'Coverage: {coverage:.1f}%')
            if coverage < 50:
                print('❌ Coverage below 50% threshold')
                exit(1)
            else:
                print('✅ Coverage meets threshold')
        except Exception as e:
            print(f'Coverage check failed: {e}')
            print('✅ Continuing anyway...')
        "
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-reports/
          htmlcov/
          coverage.xml
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 70
        MINIMUM_ORANGE: 50
      continue-on-error: true